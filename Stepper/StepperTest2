import RPi.GPIO as GPIO
import time

class bipolarStepper():
     def __init__(self, pwmPinA = 2, dirPinA = 3, pwmPinB = 4, dirPinB = 5, RPM = 10, stepsPerRotation = 200):
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(pwmPinA, GPIO.OUT)
        GPIO.setup(pwmPinB, GPIO.OUT)
        GPIO.setup(dirPinA, GPIO.OUT)
        GPIO.setup(dirPinB, GPIO.OUT)

        self.pwmA = pwmPinA
        self.pwmB = pwmPinB
        self.dirA = dirPinA
        self.dirB = dirPinB

        GPIO.output(self.pwmA, GPIO.HIGH)
        GPIO.output(self.pwmB, GPIO.HIGH)
        GPIO.output(self.dirA, GPIO.HIGH)
        GPIO.output(self.dirB, GPIO.HIGH)

        self.next = "A"

        self.steps = 0

        self.stepDelay_ms = int(60000 / (RPM * stepsPerRotation))

        self.RPM = RPM
        self.stepsPerRotation = stepsPerRotation

    def setRPM(self, RPM):
        self.stepDelay_ms = int(60000 / (RPM * self.stepsPerRotation))

    def setHome(self):
        self.steps = 0

    def returnHome(self):
        while self.steps > 0:
            self.backwardStep()
            time.sleep(self.stepDelay_ms / 1000)
        while self.steps < 0:
            self.forwardStep()
            time.sleep(self.stepDelay_ms / 1000)

    def getSteps(self):
        return self.steps

    def getAngle(self):
        return self.steps % self.stepsPerRotation / self.stepsPerRotation * 360

    def forwardStep(self):
        if self.next == "A":
            if GPIO.input(self.dirA) == GPIO.HIGH:
                GPIO.output(self.dirA, GPIO.LOW)
            else:
                GPIO.output(self.dirA, GPIO.HIGH)
            self.next = "B"
        else:
            if GPIO.input(self.dirB) == GPIO.HIGH:
                GPIO.output(self.dirB, GPIO.LOW)
            else:
                GPIO.output(self.dirB, GPIO.HIGH)
            self.next = "A"
        self.steps += 1

    def backwardStep(self):
        if self.next == "A":
            if GPIO.input(self.dirB) == GPIO.HIGH:
                GPIO.output(self.dirB, GPIO.LOW)
            else:
                GPIO.output(self.dirB, GPIO.HIGH)
            self.next = "B"
        else:
            if GPIO.input(self.dirA) == GPIO.HIGH:
                GPIO.output(self.dirA, GPIO.LOW)
            else:
                GPIO.output(self.dirA, GPIO.HIGH)
            self.next = "A"
        self.steps -= 1

    def rotate(self, steps=0, angle=None):
        if angle is not None:
            steps = round(angle / 360.0 * self.stepsPerRotation)

        if steps < 0:
            while steps < 0:
                self.backwardStep()
                steps += 1
                time.sleep(self.stepDelay_ms / 1000)
        else:
            while steps > 0:
                self.forwardStep()
                steps -= 1
                time.sleep(self.stepDelay_ms / 1000)


if __name__ == "__main__":
     
    # Pin Definitions
    pwmPinA = 2
    dirPinA = 3
    pwmPinB = 4
    dirPinB = 5

    # Create an instance of bipolarStepper
    stepper = bipolarStepper(pwmPinA, dirPinA, pwmPinB, dirPinB)

    try:
        # Set motor speed and rotation
        stepper.setRPM(10)  # Set RPM (adjust as needed)
        stepper.rotate(steps=400)  # Rotate 400 steps (adjust as needed)

        # Wait for a few seconds
        time.sleep(2)

        # Reverse the rotation
        stepper.rotate(steps=-200)  # Rotate 200 steps in reverse direction

        # Wait for a few seconds
        time.sleep(2)

        # Return to the home position
        stepper.returnHome()

    finally:
        # Clean up GPIO pins
        GPIO.cleanup()
